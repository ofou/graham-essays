name: "Release"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * *" # Run every day at midnight UTC
  workflow_dispatch:

jobs:
  check_and_build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2  # To allow checking changes between commits

      - name: Check for file changes
        id: check_files
        run: |
          # Check if any .epub, .pdf, or .csv files changed
          if git diff --name-only HEAD^ HEAD | grep -E '\.(epub|pdf|csv)$'; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Run build if changes detected
        if: steps.check_files.outputs.changes_detected == 'true'
        run: |
          make all

      - name: Count number of articles
        if: steps.check_files.outputs.changes_detected == 'true'
        id: count_articles
        run: |
          # Check if essays.csv exists, then count articles (rows - header)
          if [ -f "essays.csv" ]; then
            NUM_ARTICLES=$(( $(wc -l < essays.csv) - 1 ))
            # Ensure count is at least 0
            NUM_ARTICLES=$(( NUM_ARTICLES < 0 ? 0 : NUM_ARTICLES ))
            echo "NUM_ARTICLES=$NUM_ARTICLES" >> $GITHUB_ENV
          else
            echo "NUM_ARTICLES=0" >> $GITHUB_ENV
          fi

      - name: Generate version string
        if: steps.check_files.outputs.changes_detected == 'true'
        id: generate_version
        run: |
          # Get current date in YYYY-MM-DD format
          DATE=$(date +%Y-%m-%d)
          # Generate version string
          VERSION="${DATE}_${{ env.NUM_ARTICLES }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          # Set release title
          echo "RELEASE_TITLE=Paul Graham Essays ($DATE, ${{ env.NUM_ARTICLES }} essays)" >> $GITHUB_ENV

      - name: Create release if changes detected
        if: steps.check_files.outputs.changes_detected == 'true'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.VERSION }}"
          prerelease: false  # Creates a full release, not a pre-release
          title: "${{ env.RELEASE_TITLE }}"
          files: |
            *.epub
            *.pdf
            essays.csv